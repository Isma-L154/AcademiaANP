@model IEnumerable<ANP_Academy.ViewModel.RecetaViewModel>

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recetas de Parrilla</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/Recetas/Recetas.css" asp-append-version="true" />
</head>
<body>
    <div class="container">
        <h1 class="text-center mt-4 mb-4">Recetas de Parrilla</h1>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var recetaViewModel in Model)
            {
                var esLeida = recetaViewModel.EsLeida;
                <div class="col">
                    <div class="card h-100 @(esLeida ? "leido" : "no-leido")">
                        <img src="@Url.Action("GetImage", "Recetas", new { id = recetaViewModel.IdReceta })" class="card-img-top" alt="Imagen de la receta">
                        <div class="card-body d-flex flex-column">
                            <div class="card-title">
                                <h5>@recetaViewModel.Titulo</h5>
                                <div class="rating-container">
                                    <!-- Mostrar el promedio de calificación al lado del título -->
                                    <div class="rating">
                                        @{
                                            var fullStars = (int)recetaViewModel.Rating;
                                            var hasHalfStar = recetaViewModel.Rating - fullStars >= 0.5;
                                        }
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <input type="radio" name="rating-@recetaViewModel.IdReceta" id="star-@i-@recetaViewModel.IdReceta" value="@i" />
                                            @if (i <= fullStars)
                                            {
                                                <label for="star-@i-@recetaViewModel.IdReceta" class="full-star">★</label>
                                            }
                                            else if (i == fullStars + 1 && hasHalfStar)
                                            {
                                                <label for="star-@i-@recetaViewModel.IdReceta" class="half-star">☆</label>
                                            }
                                            else
                                            {
                                                <label for="star-@i-@recetaViewModel.IdReceta">☆</label>
                                            }
                                        }
                                        <!-- Mostrar el promedio como número al lado de las estrellas -->
                                        <span class="rating-average">(@recetaViewModel.Rating.ToString("0.0"))</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Mantén aquí los elementos originales de la receta, como descripción, ingredientes, etc. -->
                            <p class="card-text">@recetaViewModel.Descripcion</p>

                            <!-- Botones -->
                            <div class="mt-auto">
                                <div class="d-flex justify-content-center">
                                    <a asp-action="InfoReceta" asp-route-id="@recetaViewModel.IdReceta" class="btn btn-danger mb-2">Ver Receta</a>
                                </div>
                                <div class="d-flex justify-content-center">
                                    @* <button class="btn @(esLeida ? "btn-no-leido" : "btn-leido") marcar-leido-no-leido" data-id="@recetaViewModel.IdReceta">
                                        @(esLeida ? "Marcar como no visto" : "Marcar como visto")
                                    </button> *@
                                </div>
                            </div>

                            <button class="btn @(esLeida ? "btn-no-leido" : "btn-leido") mt-3 marcar-leido-no-leido" data-id="@recetaViewModel.IdReceta">
                                @(esLeida ? "Marcar como no visto" : "Marcar como visto")
                            </button>

                            @if (esLeida)
                            {
                                <div class="checkmark">✓</div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Script para manejar el botón de marcar como leído/no leído -->
    <script>
        $(document).ready(function () {
            $('.marcar-leido-no-leido').click(function () {
                var idReceta = $(this).data('id');
                var $button = $(this);
                var $card = $button.closest('.card');

                // Determinar la acción basada en el texto del botón
                var esLeido = $button.hasClass('btn-no-leido');
                var actionUrl = esLeido ? '@Url.Action("MarcarComoNoLeido", "Recetas")' : '@Url.Action("MarcarComoLeida", "Recetas")';

                $.ajax({
                    url: actionUrl,
                    type: 'POST',
                    data: { idReceta: idReceta },
                    success: function (response) {
                        if (response.success) {
                            if (esLeido) {
                                // Cambiar a estado no leído
                                $card.removeClass('leido');
                                $button.removeClass('btn-no-leido').addClass('btn-leido').text('Marcar como leído');
                                $card.find('.checkmark').remove();
                            } else {
                                // Cambiar a estado leído
                                $card.addClass('leido');
                                $button.removeClass('btn-leido').addClass('btn-no-leido').text('Marcar como no leído');
                                $card.append('<div class="checkmark">✓</div>');
                            }
                        } else {
                            console.log('Error al cambiar el estado de la receta');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log('Error al cambiar el estado de la receta:', error);
                    }
                });
            });

            // Script para manejar la calificación con estrellas
            $('input[type="radio"]').change(function () {
                var rating = $(this).val();
                var idReceta = $(this).attr('name').split('-')[1];
                var token = $('input[name="__RequestVerificationToken"]').val();
                var $spinner = $(this).closest('.rating').find('.loading-spinner');
                var $ratingAverage = $(this).closest('.rating').find('.rating-average');
                var $message = $(this).closest('.rating').find('.temp-message');
                var $starsContainer = $(this).closest('.rating');

                // Mostrar el spinner de carga
                $spinner.show();

                $.ajax({
                    url: '@Url.Action("RateReceta", "Recetas")',
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    data: {
                        __RequestVerificationToken: token,
                        idReceta: idReceta,
                        rating: rating
                    },
                    success: function (response) {
                        // Actualizar el promedio de calificación
                        if (response.newRating !== undefined) {
                            $ratingAverage.text('(' + response.newRating.toFixed(1) + ')');
                            // Actualizar las estrellas
                            var fullStars = Math.floor(response.newRating);
                            var hasHalfStar = response.newRating - fullStars >= 0.5;

                            $starsContainer.find('label').each(function (index) {
                                if (index < fullStars) {
                                    $(this).removeClass('half-star').addClass('full-star').text('★');
                                } else if (index === fullStars && hasHalfStar) {
                                    $(this).removeClass('full-star').addClass('half-star').text('☆');
                                } else {
                                    $(this).removeClass('full-star half-star').text('☆');
                                }
                            });
                        }
                        // Mostrar el mensaje temporal
                        $message.show().delay(2000).fadeOut();
                    },
                    error: function (xhr, status, error) {
                        alert('Hubo un error al enviar su calificación.');
                        console.log("Error: " + error);
                        console.log("Status: " + status);
                        console.log(xhr.responseText);
                    },
                    complete: function () {
                        // Ocultar el spinner de carga
                        $spinner.hide();
                    }
                });
            });
        });
    </script>
</body>
</html>
